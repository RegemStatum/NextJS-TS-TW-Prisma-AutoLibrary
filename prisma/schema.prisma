generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id              String  @id @default(cuid())
  title           String
  description     String
  publisher       String
  publicationYear Int     @map("publication_year")
  ISBN10          String
  cover           String
  language        String
  bookImgUrl      String  @map("book_img_url")
  available       Boolean
  featured        Boolean
  quantity        Int     @default(1)

  author   Author @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  orders  Order[]
  cabinet Cabinet?
}

model Author {
  id           String    @id @default(cuid())
  firstName    String    @map("first_name")
  secondName   String    @map("last_name")
  description  String
  birthDate    DateTime  @map("birth_date")
  deathDate    DateTime? @map("death_date")
  authorImgUrl String    @map("author_img_url")

  books Book[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  orders   Order[]
  accounts Account[]
  sessions Session[]
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  status    String

  User   User   @relation(fields: [userId], references: [id])
  userId String
  Book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  Cabinet Cabinet[]
}

model Cabinet {
  id      String  @id @default(cuid())
  isEmpty Boolean @default(true) @map("is_empty")

  Book   Book   @relation(fields: [bookId], references: [id])
  bookId String @unique

  Order Order[]
}

// next auth models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
